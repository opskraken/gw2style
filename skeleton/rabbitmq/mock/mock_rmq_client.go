// Code generated by MockGen. DO NOT EDIT.
// Source: rabbitmq/client.go
//
// Generated by this command:
//
//	mockgen -source=rabbitmq/client.go -destination=rabbitmq/mock/mock_rmq_client.go -package=mockrabbitmq
//

// Package mockrabbitmq is a generated GoMock package.
package mockrabbitmq

import (
	reflect "reflect"

	rabbitmq0 "github.com/wagslane/go-rabbitmq"
	gomock "go.uber.org/mock/gomock"

	rabbitmq "servicetemplate/rabbitmq"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddConsumer mocks base method.
func (m *MockClient) AddConsumer(arg0 rabbitmq.ConsumerOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConsumer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddConsumer indicates an expected call of AddConsumer.
func (mr *MockClientMockRecorder) AddConsumer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConsumer", reflect.TypeOf((*MockClient)(nil).AddConsumer), arg0)
}

// Conn mocks base method.
func (m *MockClient) Conn() *rabbitmq0.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(*rabbitmq0.Conn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockClientMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockClient)(nil).Conn))
}

// Publish mocks base method.
func (m *MockClient) Publish(arg0 rabbitmq.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0)
}

// Publish indicates an expected call of Publish.
func (mr *MockClientMockRecorder) Publish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockClient)(nil).Publish), arg0)
}

// Start mocks base method.
func (m *MockClient) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockClient) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}
